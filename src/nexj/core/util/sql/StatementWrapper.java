// Copyright 2011 NexJ Systems Inc. This software is licensed under the terms of the Eclipse Public License 1.0
package nexj.core.util.sql;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;

public abstract class StatementWrapper implements Statement
{
   /**
    * The wrapped statement.
    */
   protected Statement m_stmt;

   /**
    * Constructor.
    * @param stmt The statement to wrap (not null).
    */
   public StatementWrapper(Statement stmt)
   {
      assert stmt != null;
      m_stmt = stmt;
   }

   /**
    * @see java.sql.Statement#addBatch(java.lang.String)
    */
   public void addBatch(String sSQL) throws SQLException
   {
      m_stmt.addBatch(sSQL);
   }

   /**
    * @see java.sql.Statement#cancel()
    */
   public void cancel() throws SQLException
   {
      m_stmt.cancel();
   }

   /**
    * @see java.sql.Statement#clearBatch()
    */
   public void clearBatch() throws SQLException
   {
      m_stmt.clearBatch();
   }

   /**
    * @see java.sql.Statement#clearWarnings()
    */
   public void clearWarnings() throws SQLException
   {
      m_stmt.clearWarnings();
   }

   /**
    * @see java.sql.Statement#close()
    */
   public void close() throws SQLException
   {
      m_stmt.close();
   }

   /**
    * @see java.sql.Statement#execute(java.lang.String)
    */
   public boolean execute(String sSQL) throws SQLException
   {
      return m_stmt.execute(sSQL);
   }

   /**
    * @see java.sql.Statement#execute(java.lang.String, int)
    */
   public boolean execute(String sSQL, int nAutoGeneratedKeys) throws SQLException
   {
      return m_stmt.execute(sSQL, nAutoGeneratedKeys);
   }

   /**
    * @see java.sql.Statement#execute(java.lang.String, int[])
    */
   public boolean execute(String sSQL, int[] columnIndexes) throws SQLException
   {
      return m_stmt.execute(sSQL, columnIndexes);
   }

   /**
    * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])
    */
   public boolean execute(String sSQL, String[] columnNames) throws SQLException
   {
      return m_stmt.execute(sSQL, columnNames);
   }

   /**
    * @see java.sql.Statement#executeBatch()
    */
   public int[] executeBatch() throws SQLException
   {
      return m_stmt.executeBatch();
   }

   /**
    * @see java.sql.Statement#executeQuery(java.lang.String)
    */
   public ResultSet executeQuery(String sSQL) throws SQLException
   {
      return new SQLResultSet(m_stmt.executeQuery(sSQL));
   }

   /**
    * @see java.sql.Statement#executeUpdate(java.lang.String)
    */
   public int executeUpdate(String sSQL) throws SQLException
   {
      return m_stmt.executeUpdate(sSQL);
   }

   /**
    * @see java.sql.Statement#executeUpdate(java.lang.String, int)
    */
   public int executeUpdate(String sSQL, int nAutoGeneratedKeys) throws SQLException
   {
      return m_stmt.executeUpdate(sSQL, nAutoGeneratedKeys);
   }

   /**
    * @see java.sql.Statement#executeUpdate(java.lang.String, int[])
    */
   public int executeUpdate(String sSQL, int[] columnIndexes) throws SQLException
   {
      return m_stmt.executeUpdate(sSQL, columnIndexes);
   }

   /**
    * @see java.sql.Statement#executeUpdate(java.lang.String, java.lang.String[])
    */
   public int executeUpdate(String sSQL, String[] columnNames) throws SQLException
   {
      return m_stmt.executeUpdate(sSQL, columnNames);
   }

   /**
    * @see java.sql.Statement#getConnection()
    */
   public abstract Connection getConnection() throws SQLException;

   /**
    * @see java.sql.Statement#getFetchDirection()
    */
   public int getFetchDirection() throws SQLException
   {
      return m_stmt.getFetchDirection();
   }

   /**
    * @see java.sql.Statement#getFetchSize()
    */
   public int getFetchSize() throws SQLException
   {
      return m_stmt.getFetchSize();
   }

   /**
    * @see java.sql.Statement#getGeneratedKeys()
    */
   public ResultSet getGeneratedKeys() throws SQLException
   {
      return m_stmt.getGeneratedKeys();
   }

   /**
    * @see java.sql.Statement#getMaxFieldSize()
    */
   public int getMaxFieldSize() throws SQLException
   {
      return m_stmt.getMaxFieldSize();
   }

   /**
    * @see java.sql.Statement#getMaxRows()
    */
   public int getMaxRows() throws SQLException
   {
      return m_stmt.getMaxRows();
   }

   /**
    * @see java.sql.Statement#getMoreResults()
    */
   public boolean getMoreResults() throws SQLException
   {
      return m_stmt.getMoreResults();
   }

   /**
    * @see java.sql.Statement#getMoreResults(int)
    */
   public boolean getMoreResults(int nCurrent) throws SQLException
   {
      return m_stmt.getMoreResults(nCurrent);
   }

   /**
    * @see java.sql.Statement#getQueryTimeout()
    */
   public int getQueryTimeout() throws SQLException
   {
      return m_stmt.getQueryTimeout();
   }

   /**
    * @see java.sql.Statement#getResultSet()
    */
   public ResultSet getResultSet() throws SQLException
   {
      return m_stmt.getResultSet();
   }

   /**
    * @see java.sql.Statement#getResultSetConcurrency()
    */
   public int getResultSetConcurrency() throws SQLException
   {
      return m_stmt.getResultSetConcurrency();
   }

   /**
    * @see java.sql.Statement#getResultSetHoldability()
    */
   public int getResultSetHoldability() throws SQLException
   {
      return m_stmt.getResultSetHoldability();
   }

   /**
    * @see java.sql.Statement#getResultSetType()
    */
   public int getResultSetType() throws SQLException
   {
      return m_stmt.getResultSetType();
   }

   /**
    * @see java.sql.Statement#getUpdateCount()
    */
   public int getUpdateCount() throws SQLException
   {
      return m_stmt.getUpdateCount();
   }

   /**
    * @see java.sql.Statement#getWarnings()
    */
   public SQLWarning getWarnings() throws SQLException
   {
      return m_stmt.getWarnings();
   }

   /**
    * @see java.sql.Statement#setCursorName(java.lang.String)
    */
   public void setCursorName(String sName) throws SQLException
   {
      m_stmt.setCursorName(sName);
   }

   /**
    * @see java.sql.Statement#setEscapeProcessing(boolean)
    */
   public void setEscapeProcessing(boolean bEnable) throws SQLException
   {
      m_stmt.setEscapeProcessing(bEnable);
   }

   /**
    * @see java.sql.Statement#setFetchDirection(int)
    */
   public void setFetchDirection(int nDirection) throws SQLException
   {
      m_stmt.setFetchDirection(nDirection);
   }

   /**
    * @see java.sql.Statement#setFetchSize(int)
    */
   public void setFetchSize(int nRows) throws SQLException
   {
      m_stmt.setFetchSize(nRows);
   }

   /**
    * @see java.sql.Statement#setMaxFieldSize(int)
    */
   public void setMaxFieldSize(int nMax) throws SQLException
   {
      m_stmt.setMaxFieldSize(nMax);
   }

   /**
    * @see java.sql.Statement#setMaxRows(int)
    */
   public void setMaxRows(int nMax) throws SQLException
   {
      m_stmt.setMaxRows(nMax);
   }

   /**
    * @see java.sql.Statement#setQueryTimeout(int)
    */
   public void setQueryTimeout(int nSeconds) throws SQLException
   {
      m_stmt.setQueryTimeout(nSeconds);
   }

   /**
    * ResultSet wrapper.
    */
   protected class SQLResultSet implements ResultSet
   {
      /**
       * The wrapped ResultSet.
       */
      protected ResultSet m_rs;

      /**
       * Constructor.
       * @param rs The wrapped ResultSet.
       */
      public SQLResultSet(ResultSet rs)
      {
         assert rs != null;
         m_rs = rs;
      }

      /**
       * @see java.sql.ResultSet#absolute(int)
       */
      public boolean absolute(int nRow) throws SQLException
      {
         return m_rs.absolute(nRow);
      }

      /**
       * @see java.sql.ResultSet#afterLast()
       */
      public void afterLast() throws SQLException
      {
         m_rs.afterLast();
      }

      /**
       * @see java.sql.ResultSet#beforeFirst()
       */
      public void beforeFirst() throws SQLException
      {
         m_rs.beforeFirst();
      }

      /**
       * @see java.sql.ResultSet#cancelRowUpdates()
       */
      public void cancelRowUpdates() throws SQLException
      {
         m_rs.cancelRowUpdates();
      }

      /**
       * @see java.sql.ResultSet#clearWarnings()
       */
      public void clearWarnings() throws SQLException
      {
         m_rs.clearWarnings();
      }

      /**
       * @see java.sql.ResultSet#close()
       */
      public void close() throws SQLException
      {
         m_rs.close();
      }

      /**
       * @see java.sql.ResultSet#deleteRow()
       */
      public void deleteRow() throws SQLException
      {
         m_rs.deleteRow();
      }

      /**
       * @see java.sql.ResultSet#findColumn(java.lang.String)
       */
      public int findColumn(String sColumnName) throws SQLException
      {
         return m_rs.findColumn(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#first()
       */
      public boolean first() throws SQLException
      {
         return m_rs.first();
      }

      /**
       * @see java.sql.ResultSet#getArray(int)
       */
      public Array getArray(int n) throws SQLException
      {
         return m_rs.getArray(n);
      }

      /**
       * @see java.sql.ResultSet#getArray(java.lang.String)
       */
      public Array getArray(String sColName) throws SQLException
      {
         return m_rs.getArray(sColName);
      }

      /**
       * @see java.sql.ResultSet#getAsciiStream(int)
       */
      public InputStream getAsciiStream(int nColumnIndex) throws SQLException
      {
         return m_rs.getAsciiStream(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getAsciiStream(java.lang.String)
       */
      public InputStream getAsciiStream(String sColumnName) throws SQLException
      {
         return m_rs.getAsciiStream(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getBigDecimal(int)
       */
      public BigDecimal getBigDecimal(int nColumnIndex) throws SQLException
      {
         return m_rs.getBigDecimal(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getBigDecimal(java.lang.String)
       */
      public BigDecimal getBigDecimal(String sColumnName) throws SQLException
      {
         return m_rs.getBigDecimal(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getBigDecimal(int, int)
       * @deprecated
       */
      public BigDecimal getBigDecimal(int nColumnIndex, int nScale) throws SQLException
      {
         return m_rs.getBigDecimal(nColumnIndex, nScale);
      }

      /**
       * @see java.sql.ResultSet#getBigDecimal(java.lang.String, int)
       * @deprecated
       */
      public BigDecimal getBigDecimal(String sColumnName, int nScale) throws SQLException
      {
         return m_rs.getBigDecimal(sColumnName, nScale);
      }

      /**
       * @see java.sql.ResultSet#getBinaryStream(int)
       */
      public InputStream getBinaryStream(int nColumnIndex) throws SQLException
      {
         return m_rs.getBinaryStream(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getBinaryStream(java.lang.String)
       */
      public InputStream getBinaryStream(String sColumnName) throws SQLException
      {
         return m_rs.getBinaryStream(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getBlob(int)
       */
      public Blob getBlob(int n) throws SQLException
      {
         return m_rs.getBlob(n);
      }

      /**
       * @see java.sql.ResultSet#getBlob(java.lang.String)
       */
      public Blob getBlob(String sColName) throws SQLException
      {
         return m_rs.getBlob(sColName);
      }

      /**
       * @see java.sql.ResultSet#getBoolean(int)
       */
      public boolean getBoolean(int nColumnIndex) throws SQLException
      {
         return m_rs.getBoolean(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getBoolean(java.lang.String)
       */
      public boolean getBoolean(String sColumnName) throws SQLException
      {
         return m_rs.getBoolean(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getByte(int)
       */
      public byte getByte(int nColumnIndex) throws SQLException
      {
         return m_rs.getByte(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getByte(java.lang.String)
       */
      public byte getByte(String sColumnName) throws SQLException
      {
         return m_rs.getByte(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getBytes(int)
       */
      public byte[] getBytes(int nColumnIndex) throws SQLException
      {
         return m_rs.getBytes(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getBytes(java.lang.String)
       */
      public byte[] getBytes(String sColumnName) throws SQLException
      {
         return m_rs.getBytes(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getCharacterStream(int)
       */
      public Reader getCharacterStream(int nColumnIndex) throws SQLException
      {
         return m_rs.getCharacterStream(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getCharacterStream(java.lang.String)
       */
      public Reader getCharacterStream(String sColumnName) throws SQLException
      {
         return m_rs.getCharacterStream(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getClob(int)
       */
      public Clob getClob(int n) throws SQLException
      {
         return m_rs.getClob(n);
      }

      /**
       * @see java.sql.ResultSet#getClob(java.lang.String)
       */
      public Clob getClob(String nColName) throws SQLException
      {
         return m_rs.getClob(nColName);
      }

      /**
       * @see java.sql.ResultSet#getConcurrency()
       */
      public int getConcurrency() throws SQLException
      {
         return m_rs.getConcurrency();
      }

      /**
       * @see java.sql.ResultSet#getCursorName()
       */
      public String getCursorName() throws SQLException
      {
         return m_rs.getCursorName();
      }

      /**
       * @see java.sql.ResultSet#getDate(int)
       */
      public Date getDate(int nColumnIndex) throws SQLException
      {
         return m_rs.getDate(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getDate(java.lang.String)
       */
      public Date getDate(String nColumnName) throws SQLException
      {
         return m_rs.getDate(nColumnName);
      }

      /**
       * @see java.sql.ResultSet#getDate(int, java.util.Calendar)
       */
      public Date getDate(int nColumnIndex, Calendar cal) throws SQLException
      {
         return m_rs.getDate(nColumnIndex, cal);
      }

      /**
       * @see java.sql.ResultSet#getDate(java.lang.String, java.util.Calendar)
       */
      public Date getDate(String sColumnName, Calendar cal) throws SQLException
      {
         return m_rs.getDate(sColumnName, cal);
      }

      /**
       * @see java.sql.ResultSet#getDouble(int)
       */
      public double getDouble(int nColumnIndex) throws SQLException
      {
         return m_rs.getDouble(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getDouble(java.lang.String)
       */
      public double getDouble(String sColumnName) throws SQLException
      {
         return m_rs.getDouble(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getFetchDirection()
       */
      public int getFetchDirection() throws SQLException
      {
         return m_rs.getFetchDirection();
      }

      /**
       * @see java.sql.ResultSet#getFetchSize()
       */
      public int getFetchSize() throws SQLException
      {
         return m_rs.getFetchSize();
      }

      /**
       * @see java.sql.ResultSet#getFloat(int)
       */
      public float getFloat(int nColumnIndex) throws SQLException
      {
         return m_rs.getFloat(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getFloat(java.lang.String)
       */
      public float getFloat(String sColumnName) throws SQLException
      {
         return m_rs.getFloat(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getInt(int)
       */
      public int getInt(int nColumnIndex) throws SQLException
      {
         return m_rs.getInt(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getInt(java.lang.String)
       */
      public int getInt(String sColumnName) throws SQLException
      {
         return m_rs.getInt(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getLong(int)
       */
      public long getLong(int nColumnIndex) throws SQLException
      {
         return m_rs.getLong(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getLong(java.lang.String)
       */
      public long getLong(String sColumnName) throws SQLException
      {
         return m_rs.getLong(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getMetaData()
       */
      public ResultSetMetaData getMetaData() throws SQLException
      {
         return m_rs.getMetaData();
      }

      /**
       * @see java.sql.ResultSet#getObject(int)
       */
      public Object getObject(int nColumnIndex) throws SQLException
      {
         return m_rs.getObject(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getObject(java.lang.String)
       */
      public Object getObject(String sColumnName) throws SQLException
      {
         return m_rs.getObject(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getObject(int, java.util.Map)
       */
      public Object getObject(int nArg0, Map arg1) throws SQLException
      {
         return m_rs.getObject(nArg0, arg1);
      }

      /**
       * @see java.sql.ResultSet#getObject(java.lang.String, java.util.Map)
       */
      public Object getObject(String sArg0, Map arg1) throws SQLException
      {
         return m_rs.getObject(sArg0, arg1);
      }

      /**
       * @see java.sql.ResultSet#getRef(int)
       */
      public Ref getRef(int n) throws SQLException
      {
         return m_rs.getRef(n);
      }

      /**
       * @see java.sql.ResultSet#getRef(java.lang.String)
       */
      public Ref getRef(String sColName) throws SQLException
      {
         return m_rs.getRef(sColName);
      }

      /**
       * @see java.sql.ResultSet#getRow()
       */
      public int getRow() throws SQLException
      {
         return m_rs.getRow();
      }

      /**
       * @see java.sql.ResultSet#getShort(int)
       */
      public short getShort(int nColumnIndex) throws SQLException
      {
         return m_rs.getShort(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getShort(java.lang.String)
       */
      public short getShort(String sColumnName) throws SQLException
      {
         return m_rs.getShort(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getStatement()
       */
      public Statement getStatement() throws SQLException
      {
         return StatementWrapper.this; // return the wrapped statement
      }

      /**
       * @see java.sql.ResultSet#getString(int)
       */
      public String getString(int nColumnIndex) throws SQLException
      {
         return m_rs.getString(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getString(java.lang.String)
       */
      public String getString(String sColumnName) throws SQLException
      {
         return m_rs.getString(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getTime(int)
       */
      public Time getTime(int nColumnIndex) throws SQLException
      {
         return m_rs.getTime(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getTime(java.lang.String)
       */
      public Time getTime(String sColumnName) throws SQLException
      {
         return m_rs.getTime(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getTime(int, java.util.Calendar)
       */
      public Time getTime(int nColumnIndex, Calendar cal) throws SQLException
      {
         return m_rs.getTime(nColumnIndex, cal);
      }

      /**
       * @see java.sql.ResultSet#getTime(java.lang.String, java.util.Calendar)
       */
      public Time getTime(String sColumnName, Calendar cal) throws SQLException
      {
         return m_rs.getTime(sColumnName, cal);
      }

      /**
       * @see java.sql.ResultSet#getTimestamp(int)
       */
      public Timestamp getTimestamp(int nColumnIndex) throws SQLException
      {
         return m_rs.getTimestamp(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getTimestamp(java.lang.String)
       */
      public Timestamp getTimestamp(String sColumnName) throws SQLException
      {
         return m_rs.getTimestamp(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getTimestamp(int, java.util.Calendar)
       */
      public Timestamp getTimestamp(int nColumnIndex, Calendar cal) throws SQLException
      {
         return m_rs.getTimestamp(nColumnIndex, cal);
      }

      /**
       * @see java.sql.ResultSet#getTimestamp(java.lang.String, java.util.Calendar)
       */
      public Timestamp getTimestamp(String sColumnName, Calendar cal) throws SQLException
      {
         return m_rs.getTimestamp(sColumnName, cal);
      }

      /**
       * @see java.sql.ResultSet#getType()
       */
      public int getType() throws SQLException
      {
         return m_rs.getType();
      }

      /**
       * @see java.sql.ResultSet#getURL(int)
       */
      public URL getURL(int nColumnIndex) throws SQLException
      {
         return m_rs.getURL(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getURL(java.lang.String)
       */
      public URL getURL(String sColumnName) throws SQLException
      {
         return m_rs.getURL(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getUnicodeStream(int)
       * @deprecated
       */
      public InputStream getUnicodeStream(int nColumnIndex) throws SQLException
      {
         return m_rs.getUnicodeStream(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#getUnicodeStream(java.lang.String)
       * @deprecated
       */
      public InputStream getUnicodeStream(String sColumnName) throws SQLException
      {
         return m_rs.getUnicodeStream(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#getWarnings()
       */
      public SQLWarning getWarnings() throws SQLException
      {
         return m_rs.getWarnings();
      }

      /**
       * @see java.sql.ResultSet#insertRow()
       */
      public void insertRow() throws SQLException
      {
         m_rs.insertRow();
      }

      /**
       * @see java.sql.ResultSet#isAfterLast()
       */
      public boolean isAfterLast() throws SQLException
      {
         return m_rs.isAfterLast();
      }

      /**
       * @see java.sql.ResultSet#isBeforeFirst()
       */
      public boolean isBeforeFirst() throws SQLException
      {
         return m_rs.isBeforeFirst();
      }

      /**
       * @see java.sql.ResultSet#isFirst()
       */
      public boolean isFirst() throws SQLException
      {
         return m_rs.isFirst();
      }

      /**
       * @see java.sql.ResultSet#isLast()
       */
      public boolean isLast() throws SQLException
      {
         return m_rs.isLast();
      }

      /**
       * @see java.sql.ResultSet#last()
       */
      public boolean last() throws SQLException
      {
         return m_rs.last();
      }

      /**
       * @see java.sql.ResultSet#moveToCurrentRow()
       */
      public void moveToCurrentRow() throws SQLException
      {
         m_rs.moveToCurrentRow();
      }

      /**
       * @see java.sql.ResultSet#moveToInsertRow()
       */
      public void moveToInsertRow() throws SQLException
      {
         m_rs.moveToInsertRow();
      }

      /**
       * @see java.sql.ResultSet#next()
       */
      public boolean next() throws SQLException
      {
         return m_rs.next();
      }

      /**
       * @see java.sql.ResultSet#previous()
       */
      public boolean previous() throws SQLException
      {
         return m_rs.previous();
      }

      /**
       * @see java.sql.ResultSet#refreshRow()
       */
      public void refreshRow() throws SQLException
      {
         m_rs.refreshRow();
      }

      /**
       * @see java.sql.ResultSet#relative(int)
       */
      public boolean relative(int nRows) throws SQLException
      {
         return m_rs.relative(nRows);
      }

      /**
       * @see java.sql.ResultSet#rowDeleted()
       */
      public boolean rowDeleted() throws SQLException
      {
         return m_rs.rowDeleted();
      }

      /**
       * @see java.sql.ResultSet#rowInserted()
       */
      public boolean rowInserted() throws SQLException
      {
         return m_rs.rowInserted();
      }

      /**
       * @see java.sql.ResultSet#rowUpdated()
       */
      public boolean rowUpdated() throws SQLException
      {
         return m_rs.rowUpdated();
      }

      /**
       * @see java.sql.ResultSet#setFetchDirection(int)
       */
      public void setFetchDirection(int nDirection) throws SQLException
      {
         m_rs.setFetchDirection(nDirection);
      }

      /**
       * @see java.sql.ResultSet#setFetchSize(int)
       */
      public void setFetchSize(int nRows) throws SQLException
      {
         m_rs.setFetchSize(nRows);
      }

      /**
       * @see java.sql.ResultSet#updateArray(int, java.sql.Array)
       */
      public void updateArray(int nColumnIndex, Array xArray) throws SQLException
      {
         m_rs.updateArray(nColumnIndex, xArray);
      }

      /**
       * @see java.sql.ResultSet#updateArray(java.lang.String, java.sql.Array)
       */
      public void updateArray(String sColumnName, Array xArray) throws SQLException
      {
         m_rs.updateArray(sColumnName, xArray);
      }

      /**
       * @see java.sql.ResultSet#updateAsciiStream(int, java.io.InputStream, int)
       */
      public void updateAsciiStream(int nColumnIndex, InputStream x, int nLength) throws SQLException
      {
         m_rs.updateAsciiStream(nColumnIndex, x, nLength);
      }

      /**
       * @see java.sql.ResultSet#updateAsciiStream(java.lang.String, java.io.InputStream, int)
       */
      public void updateAsciiStream(String sColumnName, InputStream x, int nLength) throws SQLException
      {
         m_rs.updateAsciiStream(sColumnName, x, nLength);
      }

      /**
       * @see java.sql.ResultSet#updateBigDecimal(int, java.math.BigDecimal)
       */
      public void updateBigDecimal(int nColumnIndex, BigDecimal x) throws SQLException
      {
         m_rs.updateBigDecimal(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateBigDecimal(java.lang.String, java.math.BigDecimal)
       */
      public void updateBigDecimal(String sColumnName, BigDecimal x) throws SQLException
      {
         m_rs.updateBigDecimal(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#updateBinaryStream(int, java.io.InputStream, int)
       */
      public void updateBinaryStream(int nColumnIndex, InputStream x, int nLength) throws SQLException
      {
         m_rs.updateBinaryStream(nColumnIndex, x, nLength);
      }

      /**
       * @see java.sql.ResultSet#updateBinaryStream(java.lang.String, java.io.InputStream, int)
       */
      public void updateBinaryStream(String sColumnName, InputStream x, int nLength) throws SQLException
      {
         m_rs.updateBinaryStream(sColumnName, x, nLength);
      }

      /**
       * @see java.sql.ResultSet#updateBlob(int, java.sql.Blob)
       */
      public void updateBlob(int nColumnIndex, Blob x) throws SQLException
      {
         m_rs.updateBlob(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateBlob(java.lang.String, java.sql.Blob)
       */
      public void updateBlob(String sColumnName, Blob x) throws SQLException
      {
         m_rs.updateBlob(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#updateBoolean(int, boolean)
       */
      public void updateBoolean(int nColumnIndex, boolean b) throws SQLException
      {
         m_rs.updateBoolean(nColumnIndex, b);
      }

      /**
       * @see java.sql.ResultSet#updateBoolean(java.lang.String, boolean)
       */
      public void updateBoolean(String sColumnName, boolean b) throws SQLException
      {
         m_rs.updateBoolean(sColumnName, b);
      }

      /**
       * @see java.sql.ResultSet#updateByte(int, byte)
       */
      public void updateByte(int nColumnIndex, byte x) throws SQLException
      {
         m_rs.updateByte(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateByte(java.lang.String, byte)
       */
      public void updateByte(String sColumnName, byte x) throws SQLException
      {
         m_rs.updateByte(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#updateBytes(int, byte[])
       */
      public void updateBytes(int nColumnIndex, byte[] xArray) throws SQLException
      {
         m_rs.updateBytes(nColumnIndex, xArray);
      }

      /**
       * @see java.sql.ResultSet#updateBytes(java.lang.String, byte[])
       */
      public void updateBytes(String sColumnName, byte[] xArray) throws SQLException
      {
         m_rs.updateBytes(sColumnName, xArray);
      }

      /**
       * @see java.sql.ResultSet#updateCharacterStream(int, java.io.Reader, int)
       */
      public void updateCharacterStream(int nColumnIndex, Reader x, int nLength) throws SQLException
      {
         m_rs.updateCharacterStream(nColumnIndex, x, nLength);
      }

      /**
       * @see java.sql.ResultSet#updateCharacterStream(java.lang.String, java.io.Reader, int)
       */
      public void updateCharacterStream(String sColumnName, Reader reader, int nLength) throws SQLException
      {
         m_rs.updateCharacterStream(sColumnName, reader, nLength);
      }

      /**
       * @see java.sql.ResultSet#updateClob(int, java.sql.Clob)
       */
      public void updateClob(int nColumnIndex, Clob x) throws SQLException
      {
         m_rs.updateClob(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateClob(java.lang.String, java.sql.Clob)
       */
      public void updateClob(String sColumnName, Clob x) throws SQLException
      {
         m_rs.updateClob(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#updateDate(int, java.sql.Date)
       */
      public void updateDate(int nColumnIndex, Date x) throws SQLException
      {
         m_rs.updateDate(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateDate(java.lang.String, java.sql.Date)
       */
      public void updateDate(String sColumnName, Date x) throws SQLException
      {
         m_rs.updateDate(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#updateDouble(int, double)
       */
      public void updateDouble(int nColumnIndex, double d) throws SQLException
      {
         m_rs.updateDouble(nColumnIndex, d);
      }

      /**
       * @see java.sql.ResultSet#updateDouble(java.lang.String, double)
       */
      public void updateDouble(String sColumnName, double d) throws SQLException
      {
         m_rs.updateDouble(sColumnName, d);
      }

      /**
       * @see java.sql.ResultSet#updateFloat(int, float)
       */
      public void updateFloat(int nColumnIndex, float f) throws SQLException
      {
         m_rs.updateFloat(nColumnIndex, f);
      }

      /**
       * @see java.sql.ResultSet#updateFloat(java.lang.String, float)
       */
      public void updateFloat(String sColumnName, float f) throws SQLException
      {
         m_rs.updateFloat(sColumnName, f);
      }

      /**
       * @see java.sql.ResultSet#updateInt(int, int)
       */
      public void updateInt(int nColumnIndex, int n) throws SQLException
      {
         m_rs.updateInt(nColumnIndex, n);
      }

      /**
       * @see java.sql.ResultSet#updateInt(java.lang.String, int)
       */
      public void updateInt(String sColumnName, int n) throws SQLException
      {
         m_rs.updateInt(sColumnName, n);
      }

      /**
       * @see java.sql.ResultSet#updateLong(int, long)
       */
      public void updateLong(int nColumnIndex, long n) throws SQLException
      {
         m_rs.updateLong(nColumnIndex, n);
      }

      /**
       * @see java.sql.ResultSet#updateLong(java.lang.String, long)
       */
      public void updateLong(String sColumnName, long n) throws SQLException
      {
         m_rs.updateLong(sColumnName, n);
      }

      /**
       * @see java.sql.ResultSet#updateNull(int)
       */
      public void updateNull(int nColumnIndex) throws SQLException
      {
         m_rs.updateNull(nColumnIndex);
      }

      /**
       * @see java.sql.ResultSet#updateNull(java.lang.String)
       */
      public void updateNull(String sColumnName) throws SQLException
      {
         m_rs.updateNull(sColumnName);
      }

      /**
       * @see java.sql.ResultSet#updateObject(int, java.lang.Object)
       */
      public void updateObject(int nColumnIndex, Object x) throws SQLException
      {
         m_rs.updateObject(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateObject(java.lang.String, java.lang.Object)
       */
      public void updateObject(String sColumnName, Object x) throws SQLException
      {
         m_rs.updateObject(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#updateObject(int, java.lang.Object, int)
       */
      public void updateObject(int nColumnIndex, Object x, int nScale) throws SQLException
      {
         m_rs.updateObject(nColumnIndex, x, nScale);
      }

      /**
       * @see java.sql.ResultSet#updateObject(java.lang.String, java.lang.Object, int)
       */
      public void updateObject(String sColumnName, Object x, int nScale) throws SQLException
      {
         m_rs.updateObject(sColumnName, x, nScale);
      }

      /**
       * @see java.sql.ResultSet#updateRef(int, java.sql.Ref)
       */
      public void updateRef(int nColumnIndex, Ref x) throws SQLException
      {
         m_rs.updateRef(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateRef(java.lang.String, java.sql.Ref)
       */
      public void updateRef(String sColumnName, Ref x) throws SQLException
      {
         m_rs.updateRef(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#updateRow()
       */
      public void updateRow() throws SQLException
      {
         m_rs.updateRow();
      }

      /**
       * @see java.sql.ResultSet#updateShort(int, short)
       */
      public void updateShort(int nColumnIndex, short n) throws SQLException
      {
         m_rs.updateShort(nColumnIndex, n);
      }

      /**
       * @see java.sql.ResultSet#updateShort(java.lang.String, short)
       */
      public void updateShort(String sColumnName, short n) throws SQLException
      {
         m_rs.updateShort(sColumnName, n);
      }

      /**
       * @see java.sql.ResultSet#updateString(int, java.lang.String)
       */
      public void updateString(int nColumnIndex, String s) throws SQLException
      {
         m_rs.updateString(nColumnIndex, s);
      }

      /**
       * @see java.sql.ResultSet#updateString(java.lang.String, java.lang.String)
       */
      public void updateString(String sColumnName, String s) throws SQLException
      {
         m_rs.updateString(sColumnName, s);
      }

      /**
       * @see java.sql.ResultSet#updateTime(int, java.sql.Time)
       */
      public void updateTime(int nColumnIndex, Time x) throws SQLException
      {
         m_rs.updateTime(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateTime(java.lang.String, java.sql.Time)
       */
      public void updateTime(String sColumnName, Time x) throws SQLException
      {
         m_rs.updateTime(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#updateTimestamp(int, java.sql.Timestamp)
       */
      public void updateTimestamp(int nColumnIndex, Timestamp x) throws SQLException
      {
         m_rs.updateTimestamp(nColumnIndex, x);
      }

      /**
       * @see java.sql.ResultSet#updateTimestamp(java.lang.String, java.sql.Timestamp)
       */
      public void updateTimestamp(String sColumnName, Timestamp x) throws SQLException
      {
         m_rs.updateTimestamp(sColumnName, x);
      }

      /**
       * @see java.sql.ResultSet#wasNull()
       */
      public boolean wasNull() throws SQLException
      {
         return m_rs.wasNull();
      }
   }
}