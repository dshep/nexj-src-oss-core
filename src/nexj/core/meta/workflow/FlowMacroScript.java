// Copyright 2010 NexJ Systems Inc. This software is licensed under the terms of the Eclipse Public License 1.0
package nexj.core.meta.workflow;

import java.util.Arrays;

import nexj.core.scripting.Pair;
import nexj.core.util.Lookup;
import nexj.core.util.Undefined;

/**
 * Script generated by a flow macro.
 */
public class FlowMacroScript extends Script
{
   // associations

   /**
    * Arguments for the flow macro function.
    */
   protected Object[] m_argumentValueArray;
   
   /**
    * The flow macro.
    */
   protected FlowMacro m_macro;

   // constructors

   /**
    * Constructs the step.
    * @param sName The step name.
    */
   public FlowMacroScript(String sName)
   {
      super(sName);
   }

   // operations
   
   /**
    * Sets the flow macro.
    * @param macro The flow macro to set.
    */
   public void setMacro(FlowMacro macro)
   {
      verifyNotReadOnly();
      m_macro = macro;
   }

   /**
    * @return The flow macro.
    */
   public FlowMacro getMacro()
   {
      return m_macro;
   }

   /**
    * Sets an argument for the flow macro function.
    * @param nOrdinal The argument's ordinal.
    * @param value The value of the argument.
    */
   public void setArgumentValue(int nOrdinal, Object value)
   {
      if (m_argumentValueArray == null)
      {
         m_argumentValueArray = new Object[m_macro.getArgumentCount()];
         Arrays.fill(m_argumentValueArray, Undefined.VALUE);
      }
      
      m_argumentValueArray[nOrdinal] = value;
   }
   
   /**
    * Gets an argument for the flow macro function.
    * @param nOrdinal The argument's ordinal.
    * @return The argument value.
    */
   public Object getArgumentValue(int nOrdinal)
   {
      return (m_argumentValueArray == null) ? Undefined.VALUE : m_argumentValueArray[nOrdinal];
   }
   
   /**
    * @see nexj.core.meta.workflow.Step#setPosURLs(nexj.core.scripting.Pair)
    */
   protected void setPosURLs(Pair body)
   {
      super.setPosURLs(body);

      Lookup urlMap = m_activity.getFlow().getURLMap();

      if (urlMap != null)
      {
         Lookup posMap = m_macro.getTextPositionMap();

         if (posMap != null)
         {
            String sURL = m_macro.getURL();

            for (Lookup.Iterator itr = posMap.iterator(); itr.hasNext();)
            {
               urlMap.put(itr.next(), sURL);
            }
         }
      }
   }

   /**
    * @see nexj.core.meta.NamedMetadataObject#toString()
    */
   public String toString()
   {
      return super.toString() +
         ((m_macro == null) ? "" : '(' + m_macro.getName() + ')');
   }
}
