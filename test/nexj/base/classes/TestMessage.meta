<Class base="SysMessage">
   <Attributes>
      <Attribute name="classCode" required="true" type="string" value="&quot;TMSG&quot;"/>
      <Attribute name="name" type="string"/>
      <Attribute name="failure" type="boolean"/>
      <Attribute name="resubmit" type="boolean"/>
      <Attribute name="batch" reverse="messages" type="TestMessageBatch"/>
      <Attribute cascade="delete" collection="true" name="resources" reverse="message" type="TestResourceLink"/>
      <Attribute initializer="(message (: name (@ name)) (: failure (@ failure)) (: resubmit (@ resubmit)))" name="body" type="any" value="(@ values body)"/>
      <Attribute initializer="#f" name="failOnSend" type="boolean"/>
      <Attribute initializer="#f" name="failOnComplete" type="boolean"/>
      <Attribute initializer="#f" name="failGetSemaphores" type="boolean"/>
   </Attributes>
   <Events>
      <Event name="getSemaphores">
         <Actions>
            <Action name="main" type="main"><![CDATA[(when (@ failGetSemaphores)
   (error "err.test.getSemaphores")
)
(unless (null? (@ resources))
   (vector->list 
      (map
         (lambda (resource)
            (cons (((resource'resource)':oid)'toBinary) 1)
         )
         (@ resources)
      )
   )
)]]></Action>
         </Actions>
      </Event>
      <Event name="runTest" static="true" visibility="public">
         <Actions>
            <Action name="main" type="main"><![CDATA[(define (sender-send queue-name msg)
   (logger'debug "sender-send")
   (let ((queue (SysQueue'getQueue queue-name)))
      (queue'send msg)
   )
)
      

(define (testPersisted)
   (let ((failure #f)(resubmit #f))
      ;(for ((i 0)) (< i 200) (set! i (+ 1 i))
         (begin-switch-user "TestUser"
            (logger'info "starting next transaction")
            (begin-transaction
               ;(for ((j 0)) (< j 100) (set! j (+ 1 j))
                  (let*
                     (  (batch (TestMessageBatch'new))
                        (init (TestMessage'new (: batch batch) (: name "init") (: failure #f) (: resubmit #f)))
                        (final (TestMessage'new (: batch batch) (: name "final") (: failure #f) (: resubmit #f)))
                        (short3 (TestMessage'new (: batch batch) (: name "short3") (: failure #f) (: resubmit #f) (: following final)))
                     )
                     (sender-send "ContainerTestQueue" init)
                     (sender-send "ContainerTestQueue" short3)
                     (sender-send "ContainerTestQueue" (TestMessage'new (: batch batch) (: name "short1") (: failure #f) (: resubmit #f) (: preceding init) (: following short3)))
                     (sender-send "ContainerTestQueue" (TestMessage'new (: batch batch) (: name "short2") (: failure #f) (: resubmit #f) (: preceding init) (: following short3)))
                     (sender-send "ContainerTestQueue" (TestMessage'new (: batch batch) (: name "long") (: failure failure) (: resubmit resubmit) (: preceding init) (: following final)))
                     (sender-send "ContainerTestQueue" final)
                  )
               ;)
            )
         )
      ;)
      (logger'info "done test")
   )
)

(define (send-unpersisted name receiver)
   (sender-send "IntegrationTestQueue" 
      (message 
         (: :class "SysMessage")
         (: body (message (: name name)))
         (: receiver receiver)
      )
   )
)

(define (send-channel name receiver)
   ((((((invocation-context)'metadata)'getChannel "IntegrationTestQueue")'sender)'getInstance (invocation-context))'send
      (message 
         (: :class "SysMessage")
         (: body (message (: name name)))
         (: receiver receiver)
      )
   )
)

(define (testUnpersisted)
   (send-unpersisted "direct-only-1" "node1")
   (send-unpersisted "direct-only-2" "node2")
   (send-unpersisted "direct-any" 'one)
   (send-unpersisted "direct-all" 'all)
   (send-unpersisted "direct-dispatch" 'dispatcher)
   (send-unpersisted "direct-except" 'other)
   (send-unpersisted "direct-persisted" ())

   (send-channel "channel-only-1" "node1")
   (send-channel "channel-only-2" "node2")
   (send-channel "channel-any" 'one)
   (send-channel "channel-all" 'all)
   (send-channel "channel-dispatch" 'dispatcher)
   (send-channel "channel-except" 'other)
   (send-channel "channel-persisted" ())
)]]></Action>
         </Actions>
      </Event>
      <Event name="receive">
         <Actions>
            <Action name="main" type="main"><![CDATA[(import 'java.lang.Thread)
(logger'debug "receiving as user " ((user)'loginName) " message: <name=" (this'name) ", failure=" (this'failure) ", resend=" (this'resubmit) ">")
(TestResult'new (: name (@ name)) (: service #f))
(this'name (string-append (@ name) "-x"))
(if (@ failure)
   (this'fail '())
   (begin
      (this'resendRequired (@ resubmit))
      (this'resubmit #f)
   )
)]]></Action>
         </Actions>
      </Event>
      <Event name="onCancel">
         <Actions>
            <Action condition="(not (null? (@ batch)))" name="main" type="main"><![CDATA[(logger'debug "incrementing batch'cancelled")
((@ batch)'cancelled (+ 1 ((@ batch)'cancelled)))]]></Action>
         </Actions>
      </Event>
      <Event name="onCompletion">
         <Actions>
            <Action condition="(@ failOnComplete)" name="maybeFail" type="before"><![CDATA[(error "err.test.onComplete")]]></Action>
            <Action condition="(not (null? (@ batch)))" name="main" type="main"><![CDATA[(logger'debug "incrementing batch'completed: " this)
((@ batch)'completed (+ 1 ((@ batch)'completed)))]]></Action>
         </Actions>
      </Event>
      <Event name="onDelivery">
         <Actions>
            <Action condition="(not (null? (@ batch)))" name="main" type="main"><![CDATA[(logger'debug "incrementing batch'delivered")
((@ batch)'delivered (+ 1 ((@ batch)'delivered)))]]></Action>
         </Actions>
      </Event>
      <Event name="onFailure">
         <Actions>
            <Action condition="(not (null? (@ batch)))" name="main" type="main"><![CDATA[(logger'debug "incrementing batch'failed")
((@ batch)'failed (+ 1 ((@ batch)'failed)))]]></Action>
         </Actions>
      </Event>
      <Event name="onSend">
         <Actions>
            <Action condition="(@ failOnSend)" name="maybeFail" type="before"><![CDATA[(error "err.test.onSend")]]></Action>
            <Action condition="(and (not (null? (@ batch))) (@ queue receiveEnabled))" name="main" type="main"><![CDATA[(logger'debug "incrementing batch'sent")
((@ batch)'sent (+ 1 ((@ batch)'sent)))]]></Action>
         </Actions>
      </Event>
   </Events>
   <PersistenceMapping classCodeAttribute="classCode" dataSource="DefaultRelationalDatabase">
      <RelationalMapping keyGenerator="KeyGenerator.GUIDGen" primaryTable="Message">
         <AttributeMappings>
            <AttributeMapping destinationKey="TestMsgBatch.PK" name="batch" sourceKey="TestMessage.FK_batch"/>
            <AttributeMapping destinationKey="TestResourceLink.FK_message" name="resources" sourceKey="TestMessage.PK"/>
            <AttributeMapping column="failure" name="failure" table="TestMessage"/>
            <AttributeMapping column="resubmit" name="resubmit" table="TestMessage"/>
            <AttributeMapping column="failGetSemaphores" name="failGetSemaphores" table="TestMessage"/>
            <AttributeMapping column="failOnComplete" name="failOnComplete" table="TestMessage"/>
            <AttributeMapping column="failOnSend" name="failOnSend" table="TestMessage"/>
         </AttributeMappings>
      </RelationalMapping>
   </PersistenceMapping>
</Class>
